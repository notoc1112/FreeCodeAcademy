//ARRAYS

//one-dimensional arrays are arrays that do not have other arrays nested inside of them. Arrays can contain vast types of data, including booleans, strings, and numbers.

//all arrays have a length property.

let simpleArray = ['one', 2, 'three', true, false, undefined, null];
console.log(simpleArray.length); //log returns 7

//multi-dimensional arrays contain other arrays inside of them. Arrays can also contain complex objects.

//recall bracket notation to access array indexes. Arrays are zero-indexed, so the first index is [0], not [1]

//bracket notation can be used to set values as well.

//array.push() method adds argument(s) to the end of an array, while array.unshift() method adds argument(s) to the beginning of an array.

//variables can be passed to push() and unshift() as well, adding their associated values to the array.

// array.pop() and array.shift() methods are used to remove elements from the end and beginning of arrays respectively. These methods take no arguments and are only capable of removing one element at a time. The removed element is returned with the method call as well:

let myArr = [1,2,3,4,5];
let thisWasPopped = myArr.pop();
console.log(myArr); //returns [1,2,3,4]
console.log(thisWasPopped); //returns 5

//the splice() method is used to remove any number of consecutive elements from any place in an array.

//splice can take up to 3 parameters, but in its basic usage, two parameters is used. The first argument is the integer representing the index at which the method should begin removing, while the second represents the number of elements to remove from that point. 

let array = ['today', 'was', 'not', 'so', 'great'];
array.splice(2, 2); //remove two elements beginning with third element;
//array now equals ['today, 'was', 'great']
//splice also returns a new array containing the value of the removed elements, so array.splice() would return ['not', 'so].

//splice()'s third potential parameter is an element that can be added to the array in the removed element's place. The function example below is for a way to change a color based on an action:

function colorChange(arr, index, newColor) {
	arr.splice(index, 1, newColor);
	return arr;
}

let colorScheme = ['#878787', '#a08794', '#bb7e8c', '#c9b6be', '#d1becf'];

colorScheme = colorChange(colorScheme, 2, '#332327');
//we have removed '#bb7e8c' and added '#332327' in is place.
//colorScheme now equals ['#878787', '#a08794', '#332327', '#c9b6be', '#d1becf']

//note that multiple values can be used in the place of the third parameter, allowing as many values to be inserted as needed.

//slice() method, UNLIKE splice(),  does not modify arrays, but instead only copies the desired elemets into a new array. It takes only 2 parameters: the index at which the extraction begins, and the index at which it stops (the stopping index is NOT included in this new array)

let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];

let todaysWeather = weatherConditions.slice(1, 3);
// todaysWeather equals ['snow', 'sleet'];
// weatherConditions still equals ['rain', 'snow', 'sleet', 'hail', 'clear']

//spread operator ('...') is an operator that copies all of the elements of array in order.

//below is an example of the spread operator being used to copy an array

let thisArray = [true, true, undefined, false, null];
let thatArray = [...thisArray];
// thatArray equals [true, true, undefined, false, null]
// thisArray remains unchanged, and is identical to thatArray

/*FUN SIDE NOTE:
The following example from this lesson is an interesting implementation of a while loop that uses a "reverse counter", a nice alternative to an incrementally increasing i in a for loop:
*/
function copyMachine(arr, num) {
  let newArr = [];
  while (num >= 1) {
    // change code below this line
    newArr.push([...arr]);
    // change code above this line
    num--;
  }
  return newArr;
}

// change code here to test different cases:
console.log(copyMachine([true, false, true], 2));

//note that the spread operator offers a very simplified way to bypass basic array contatenation

function spreadOut() {
  let fragment = ['to', 'code'];
  let sentence = ['learning', ...fragment, 'is', 'fun']; // change this line
  return sentence;
}

// do not change code below this line
console.log(spreadOut()); //returns ['learning', 'to', 'code', 'is', 'fun'] 

//indexOf() method is used to check the existence of a specific element in an array. it returns the index of a given element if it exists in the array, or -1 if the element does not exist

//NOTE: research every(), forEach(), and map() methods further for built-in iterative methods for arrays.

//while one can learn more of these helpful methods, writing one's own iterative for loops offers the greatest control over iterating through array data and manipulating accordingly.

//OBJECTS

//reminder, objects are comprised of key-value pairs. An alternate way to store data. 

let FCC_User = {
  username: 'awesome_coder',
  followers: 572,
  points: 1741,
  completedProjects: 15
};

//To pull a specific piece of data, one can use either dot notation or bracket notation:

let userData = FCC_User.followers;
// userData equals 572

let userData = FCC_User['followers']
// userData equals 572

//with bracket notation, quotes are needed as variables can be passed into the brackets.

//one can also use dot or bracket notation to set NEW values in an object.

//bracket and dot notation work for setting new values even when the data is nested within multiple layers of objects

//passing variables to brackets is a quick way to allow functions to seek data within your objects

//delete object.attribute is a quick way to remove a key-value pair from an object.

delete foods.apples;

//to check if an object has a property, use either the "in" keyword or the .hasOwnProperty() method;

users.hasOwnProperty('Alan');
'Alan' in users;
// both return true

//iterating through objects in a for loop requires specific syntax, known as a for...in loop:

for (let user in users) {
  console.log(user);
};

// logs:
Alan
Jeff
Sarah
Ryan

//KEEP THIS EXERCISE IN MIND. IT TRIPPED YOU UP BEFORE GETTING TO FINAL ANSWER. Remember that even when iterating through, you still need the full object specs broken down, and bracket notation will simplify the issue of variables.

function countOnline(obj) {
  // change code below this line
  let count = 0;
  for (let user in obj) {
    if (obj[user]['online'] === true) { //note here why "user.online === true" was completely useless.
      count++;
    }
  }
  return count;
  // change code above this line
}

console.log(countOnline(users));

//the Object.keys() method returns an array of all the properties of the object passed as its single argument.

let users = {
//user data here, with user names as properties
}

function getUserNames(obj) {
	return Object.keys(obj)
}//returns an array of user names


